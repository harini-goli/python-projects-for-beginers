# import all functions from tkinter   
from tkinter import *

# import messagebox class from tkinter
from tkinter import messagebox

# Define aesthetic color palette
BG_COLOR = "#f7f7f7"  # Soft neutral background
LABEL_BG = "#8EC6C5"  # Calming teal
ENTRY_BG = "#ffffff"  # White input fields
BUTTON_BG = "#FF6B6B"  # Vibrant coral
BUTTON_FG = "white"  # Button text color

# Function for clearing the contents of all text entry boxes
def clearAll():
    dayField.delete(0, END)
    monthField.delete(0, END)
    yearField.delete(0, END)
    givenDayField.delete(0, END)
    givenMonthField.delete(0, END)
    givenYearField.delete(0, END)
    rsltDayField.delete(0, END)
    rsltMonthField.delete(0, END)
    rsltYearField.delete(0, END)

# Function for checking errors
def checkError():
    if (dayField.get() == "" or monthField.get() == "" or yearField.get() == "" or 
        givenDayField.get() == "" or givenMonthField.get() == "" or givenYearField.get() == ""):
        messagebox.showerror("Input Error", "Please fill in all fields.")
        clearAll()
        return -1

# Function to calculate Age
def calculateAge():
    value = checkError()
    if value == -1:
        return
    else:
        birth_day = int(dayField.get())
        birth_month = int(monthField.get())
        birth_year = int(yearField.get())

        given_day = int(givenDayField.get())
        given_month = int(givenMonthField.get())
        given_year = int(givenYearField.get())

        month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

        if birth_day > given_day:
            given_month -= 1
            given_day += month_days[birth_month - 1]

        if birth_month > given_month:
            given_year -= 1
            given_month += 12

        calculated_day = given_day - birth_day
        calculated_month = given_month - birth_month
        calculated_year = given_year - birth_year

        rsltDayField.insert(10, str(calculated_day))
        rsltMonthField.insert(10, str(calculated_month))
        rsltYearField.insert(10, str(calculated_year))

# Driver Code
if __name__ == "__main__":
    gui = Tk()
    gui.configure(background=BG_COLOR)
    gui.title("Age Calculator")
    gui.geometry("525x260")

    # Labels with aesthetic colors
    dob = Label(gui, text="Date Of Birth", bg=LABEL_BG)
    givenDate = Label(gui, text="Given Date", bg=LABEL_BG)

    labels = ["Day", "Month", "Year", "Given Day", "Given Month", "Given Year", "Years", "Months", "Days"]
    label_widgets = [Label(gui, text=label, bg=BG_COLOR) for label in labels]

    # Buttons with modern styling
    resultantAge = Button(gui, text="Calculate Age", fg=BUTTON_FG, bg=BUTTON_BG, command=calculateAge)
    clearAllEntry = Button(gui, text="Clear All", fg=BUTTON_FG, bg=BUTTON_BG, command=clearAll)

    # Entry fields
    dayField = Entry(gui, bg=ENTRY_BG)
    monthField = Entry(gui, bg=ENTRY_BG)
    yearField = Entry(gui, bg=ENTRY_BG)
    givenDayField = Entry(gui, bg=ENTRY_BG)
    givenMonthField = Entry(gui, bg=ENTRY_BG)
    givenYearField = Entry(gui, bg=ENTRY_BG)
    rsltYearField = Entry(gui, bg=ENTRY_BG)
    rsltMonthField = Entry(gui, bg=ENTRY_BG)
    rsltDayField = Entry(gui, bg=ENTRY_BG)

    # Grid arrangement
    dob.grid(row=0, column=1)
    givenDate.grid(row=0, column=4)

    positions = [
        (1, 0, dayField), (2, 0, monthField), (3, 0, yearField),
        (1, 3, givenDayField), (2, 3, givenMonthField), (3, 3, givenYearField),
        (5, 2, rsltYearField), (7, 2, rsltMonthField), (9, 2, rsltDayField)
    ]

    for i, label_widget in enumerate(label_widgets):
        label_widget.grid(row=i + 1 if i < 6 else i - 1, column=2 if i >= 6 else 0 if i < 3 else 3)

    for row, col, entry in positions:
        entry.grid(row=row, column=col)

    resultantAge.grid(row=4, column=2)
    clearAllEntry.grid(row=12, column=2)

    gui.mainloop()
